# Пресняков Артём. ИУ7-13Б.
# 3-я лаборотрная, 19-й вариант.
# Найти стороны треугольника по координатам.
# Определить медиану из наименьшего угла.
# Понять является ли треугольник остроугольным.
# Узнать находится ли точка внутри треугольника.
# Найти расстояние от точки до самой удалённой стороны

from math import *

# Вводим значение абсолютной погрешности
eps = 1e-8+0.00025
# Начинаем программу с ввода координат точек треугольника
print('Введите координаты x и y точки A через пробел:', end=' ')
Ax,Ay = map(int, input().split())
print('Введите координаты x и y точки B через пробел:', end=' ')
Bx,By = map(int, input().split())
print('Введите координаты x и y точки C через пробел:', end=' ')
Cx,Cy = map(int, input().split())

# Далее производим расчёт длин сторон треугольнка ABC
AB = sqrt(((Ax-Bx)**2)+((Ay-By)**2))
BC = sqrt(((Bx-Cx)**2)+((By-Cy)**2))
CA = sqrt(((Cx-Ax)**2)+((Cy-Ay)**2))

# Узнаём, существует ли треуголбник и является ли он остроугольным
exst = False
is_Ostr = False
if AB + BC > CA and CA + BC > AB and AB + CA > BC:
    exst = True

else:
    print('Такого треугольника не сущетсвует')

if (((AB**2 + BC**2 > CA**2) or (CA**2 + BC**2 > AB**2) or (AB**2 + CA**2 >BC**2))
    and exst == True):
    is_Ostr = True

# Вычисление медианы из наименьшего угла
med = 0
if AB<BC and AB<CA:
    med = sqrt((2*BC**2+2*CA**2-AB**2)/4)

elif CA<BC and CA<AB:
    med = sqrt((2*BC**2+2*AB**2-CA**2)/4)

elif BC<AB and BC<CA:
    med = sqrt((2*AB**2+2*CA**2-BC**2)/4)

elif AB==BC==CA:
    med = sqrt((2*AB**2+2*CA**2-BC**2)/4)

# Промежуточный вывод
if exst == True:
    print('Длина стороны AB: ' + '{:.7g}'.format(AB))
    print('Длина стороны BC: ' + '{:.7g}'.format(BC))
    print('Длина стороны CA: ' + '{:.7g}'.format(CA))

    if is_Ostr == True:
        print('Треугольник является остроугольным')

    else:
        print('Треугольник не является остроугольным')

    print('Длина медианы из наименьшего угла: ' + '{:.7g}'.format(med))

# Вводим значение свободной точки
print('Введите координаты x и y свободной точки через пробел: ', end='')
Sx,Sy = map(int, input().split())

# Узнаём, находится ли точка внутри треугольника
if exst == True:
    is_Ins = False
    # Находим площади трёх треугольников, которые образует точка со сторонами треугольника через формулу Геррона
    SA = sqrt((Sx - Ax) ** 2 + (Sy - Ay) ** 2)
    SB = sqrt((Sx - Bx) ** 2 + (Sy - By) ** 2)
    SC = sqrt((Sx - Cx) ** 2 + (Sy - Cy) ** 2)
    SSAC = sqrt(((SA + CA + SC) / 2) * (((SA + CA + SC) / 2) - SA) * (((SA + CA + SC) / 2) - CA) * (
            ((SA + CA + SC) / 2) - SC))
    SSBC = sqrt(((SB + BC + SC) / 2) * (((SB + BC + SC) / 2) - SB) * (((SB + BC + SC) / 2) - SC) * (
            ((SB + BC + SC) / 2) - BC))
    SSBA = sqrt(((SA + AB + SB) / 2) * (((SA + AB + SB) / 2) - SA) * (((SA + AB + SB) / 2) - AB) * (
            ((SA + AB + SB) / 2) - SB))
    if (abs((sqrt(((AB+BC+CA)/2)*(((AB+BC+CA)/2) - AB)*(((AB+BC+CA)/2)-BC)*(((AB+BC+CA)/2)-CA)))
             - (SSAC + SSBC + SSBA)) < eps):
        is_Ins = True
        print('Точка находится внутри треугольника ABC')
        # Расстоянием от точки до прямой является высота, приведённая из этой точки к прямой или ёё продолжению
        # Найдём высоты через найденные площади образованных треугольников, далее найдём максимальное
        s1 = 2*SSAC/CA
        s2 = 2*SSBC/BC
        s3 = 2*SSBA/AB
        sMax = max(s1,s2,s3)
        print('Расстояние от точки до самой удалённой стороны: ' + '{:.7g}'.format(sMax))


    else:
        print('Точка не находится внутри треугольника ABC')